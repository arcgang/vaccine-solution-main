(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{"kB/v":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return l}));a("91GP"),a("rGqo"),a("yt8O"),a("Btvt"),a("RW0V"),a("q1tI");var n=a("7ljp"),r=a("013z");a("qKvR");function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var o={},i={_frontmatter:o},s=r.a;function l(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(s,c({},i,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Create the following artifacts in the ",Object(n.b)("inlineCode",{parentName:"p"},"eventstreams")," namespace on your OpenShift cluster:"),Object(n.b)("ol",{parentName:"li"},Object(n.b)("li",{parentName:"ol"},"Create an EventStreams instance ",Object(n.b)("em",{parentName:"li"},"(via the ",Object(n.b)("a",c({parentName:"em"},{href:"https://ibm.github.io/event-streams/installing/installing/#install-an-event-streams-instance"}),"Event Streams Custom Resource"),")"),"."),Object(n.b)("li",{parentName:"ol"},"Create a ",Object(n.b)("a",c({parentName:"li"},{href:"https://ibm.github.io/event-streams/security/managing-access/#managing-access-to-kafka-resources"}),"Kafka User with SCRAM-based credentials"),", as required by the ",Object(n.b)("a",c({parentName:"li"},{href:"https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator#application-deployment"}),"Vaccine Reefer Simulator"),"."),Object(n.b)("li",{parentName:"ol"},"Create a ",Object(n.b)("a",c({parentName:"li"},{href:"https://ibm.github.io/event-streams/security/managing-access/#managing-access-to-kafka-resources"}),"Kafka User with TLS-based credentials"),", as required by the ",Object(n.b)("a",c({parentName:"li"},{href:"https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent#create-a-tls-user"}),"Vaccine Monitoring Agent"),"."),Object(n.b)("li",{parentName:"ol"},"Create two ",Object(n.b)("a",c({parentName:"li"},{href:"https://ibm.github.io/event-streams/getting-started/creating-topics/"}),"Kafka Topics"),". This tutorial will assume the names of ",Object(n.b)("inlineCode",{parentName:"li"},"vaccine.shipment.plans")," respectively.")))),Object(n.b)("h2",null,"Deploy Postgresql"),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"git clone https://github.com/ibm-cloud-architecture/vaccine-gitops.git\ncd vaccine-gitops/environments\noc apply -k \n")),Object(n.b)("h2",null,"Deploy the Vaccine Order Service with Event Streams"),Object(n.b)("p",null,"This microservice is built using maven and Quarkus extensions. In this current main project we have\nWe have already pushed the last version of this service on dockerhub, if you do not want to build it. "),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Ensure you are working inside the correct project via the following ",Object(n.b)("inlineCode",{parentName:"p"},"oc")," command:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"export PROJECT_NAME=vaccine-solution\noc project ${PROJECT_NAME}\n"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Export the value of your Event Streams cluster name into an environment variable:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"export CLUSTER_NAME=eda-dev\nexport EVENTSTREAMS_NS=eventstreams\n")),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"To check what the name of your Event Streams cluster name is do:",Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"$ oc get eventstreams -n ${EVENTSTREAMS_NS}\nNAME           STATUS\neda-dev    Ready\n"))))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Deploy a postgres server. The orders are persisted in an external Postgres instance running on Openshift cluster. To do a simple deployment performs the following commands:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"})," oc apply -f event-streams/infrastructure/service-account.yaml\n oc adm policy add-scc-to-user anyuid -z vaccine-runtime -n vaccine-solution\n oc apply -k event-streams/infrastructure/postgres\n\n"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Get Kafka TLS user name to access Event Streams bootstrap using the external route. export this user name in KAFKA_USER environment variable:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"oc get kafkausers -n $EVENTSTREAMS_NS \n# NAME                                CLUSTER   AUTHENTICATION   AUTHORIZATION\n# app-scram                           eda-dev   scram-sha-512    simple\n# app-tls                             eda-dev   tls              simple\nexport KAFKA_USER=app-tls\n"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Copy Kafka TLS user certificate to target project:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"oc get secret ${KAFKA_USER} -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.namespace=\"'${PROJECT_NAME}'\"' | oc apply -f -\n"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Get Kafka bootstrap server URL within"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),'export KAFKA_BROKERS=$(oc get route -n ${EVENTSTREAMS_NS} ${CLUSTER_NAME}-kafka-bootstrap -o jsonpath="{.status.ingress[0].host}:443")\n'))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Copy TLS server CA certificate from eventstreams project to local project with the command:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"oc get secret ${CLUSTER_NAME}-cluster-ca-cert -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"kafka-cluster-ca-cert\"' |jq -r '.metadata.namespace=\"'${PROJECT_NAME}'\"' | oc apply -f -\n"))),Object(n.b)("li",{parentName:"ol"},Object(n.b)("p",{parentName:"li"},"Deploy the order management microservice"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"oc apply -f ./apps/order-mgt/base/order-mgt-configmap.yaml\noc apply -f ./apps/order-mgt/base/order-mgt-deployconfig.yaml\n")))),Object(n.b)("h3",null,"Deploy Debezium CDC connector"),Object(n.b)("p",null,"The ",Object(n.b)("a",c({parentName:"p"},{href:"https://ibm.github.io/event-streams/connecting/setting-up-connectors/"}),"Event Streams product documentation")," goes over the tasks to be done to config Kafka Connect cluster, but we can summarize them for our use case as:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Start a Kafka connector cluster: We use the custom resource definition called ",Object(n.b)("inlineCode",{parentName:"p"},"KafkaConnectS2I"),", which one instance represents a Kafka connect cluster. Each connector is represented by another custom resource called ",Object(n.b)("inlineCode",{parentName:"p"},"KafkaConnector"),". Kafka connect needs a user access to the Brokers. We can use the TLS user as previously done (See also ",Object(n.b)("a",c({parentName:"p"},{href:"https://ibm-cloud-architecture.github.io/refarch-eda/use-cases/connect-cos/#set-up-the-kafka-connect-cluster"}),"this note")," for the same type of setting). "),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Event Streams UI has a Toolbox menu with the ",Object(n.b)("inlineCode",{parentName:"p"},"Set up a Kafka Connect environment")," where we can download the ",Object(n.b)("inlineCode",{parentName:"p"},"KafkaConnectS2I")," configuration. The matching configuration is ",Object(n.b)("a",c({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/vaccine-order-mgr-pg/blob/main/environment/cdc/kafka-connect-s2i.yaml"}),"in this file")," and uses predefined TLS user and cluster certificate. The cluster name is ",Object(n.b)("inlineCode",{parentName:"p"},"connect-cluster"),".")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Update the following values in this file: ",Object(n.b)("inlineCode",{parentName:"p"},"bootstrapServers")," and ",Object(n.b)("inlineCode",{parentName:"p"},"secretName: tls"),"  to ",Object(n.b)("inlineCode",{parentName:"p"},"secretName: <yourTLSuser>")," and the Server ca certificate secretName like ",Object(n.b)("inlineCode",{parentName:"p"},"kafka-cluster-ca-cert"),"."),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-yaml"}),"tls:\n trustedCertificates:\n   - certificate: ca.crt\n     secretName: kafka-cluster-ca-cert\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Deploy the cluster with: ",Object(n.b)("inlineCode",{parentName:"p"},"oc apply -f kafka-connect-s2i.yaml -n ${EVENTSTREAMS_NS}"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Validate it via: "),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"oc get kafkaconnects2i -n ${EVENTSTREAMS_NS}\noc describe kafkaconnects2i connect-cluster -n ${EVENTSTREAMS_NS}\n"))))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Download the postgres plugin archive from ",Object(n.b)("a",c({parentName:"p"},{href:"https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/1.4.0.Final/debezium-connector-postgres-1.4.0.Final-plugin.tar.gz"}),"debezium maven repository")," and then add the jar files to the ",Object(n.b)("inlineCode",{parentName:"p"},"my-plugins\\debezium-connector")," folder. We need a subfolder as this connector includes multiple jars. This step was already done and the debezium connector jars are in the ",Object(n.b)("a",c({parentName:"p"},{href:"https://github.com/ibm-cloud-architecture/vaccine-order-mgr-pg/tree/main/environment/cdc/my-plugins/debezium-connector"}),"environment/cdc/my-plugins/debezium-connector)")),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{}),"├── my-plugins\n│   └── debezium-connector\n│       ├── CHANGELOG.md\n│       ├── CONTRIBUTE.md\n│       ├── COPYRIGHT.txt\n│       ├── LICENSE-3rd-PARTIES.txt\n│       ├── LICENSE.txt\n│       ├── README.md\n│       ├── README_ZH.md\n│       ├── debezium-api-1.4.0.Final.jar\n│       ├── debezium-connector-postgres-1.4.0.Final.jar\n│       ├── debezium-core-1.4.0.Final.jar\n│       ├── failureaccess-1.0.1.jar\n│       ├── guava-30.0-jre.jar\n│       ├── postgresql-42.2.14.jar\n│       └── protobuf-java-3.8.0.jar\n└── pg-connector.yaml\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Deploy the connector configuration:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-shell"}),"# pwd = .../environment/cdc/\noc start-build connect-cluster-connect --from-dir ./my-plugins/ --follow -n ${EVENTSTREAMS_NS}\n#...\n# Storing signatures\n# Successfully pushed image-registry.openshift-image-registry.svc:5000/eventstreams/connect-cluster-connect@sha256:9315b6a6c8f904d0fb5a57f67ba4c9067c6c8264814f283151b20b9d6f147092\n# Push successful\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Modify the ",Object(n.b)("inlineCode",{parentName:"p"},"pg-connector.yaml")," from the ",Object(n.b)("inlineCode",{parentName:"p"},"environment/cdc")," folder to configure the Postgres datasource credentials:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",c({parentName:"pre"},{className:"language-yaml"}),"config: \n  database.dbname: postgres\n  database.hostname: postgres.vaccineorder.svc\n  database.password: pgpwd\n  database.port: 5432\n  database.server.name: vaccine\n  database.user: postgres\n  table.whitelist: public.orderevents\n  plugin.name: pgoutput\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Then start the connector: ",Object(n.b)("inlineCode",{parentName:"p"},"oc apply -f pg-connector.yaml -n ${EVENTSTREAMS_NS}"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Verify it is running: ",Object(n.b)("inlineCode",{parentName:"p"},"oc describe kafkaconnector pg-connector -n ${EVENTSTREAMS_NS}"),", you should see one task running. ")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Looking at the pod trace for the connector you should see a successful connection, something like:"))),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{}),"Successfully tested connection for jdbc:postgresql://postgres.vaccineorder.svc:5432/postgres with user 'postgres' \n")),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"A new topic may have been created with the name of the table replicated: ",Object(n.b)("inlineCode",{parentName:"li"},"vaccine.public.orderevents")," with new messages mapping the rows in the table.")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-use-cases-order-eventstreams-mdx-8a13eb19918697e8f496.js.map