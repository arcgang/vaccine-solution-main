{"componentChunkName":"component---src-pages-solution-reefer-iot-index-mdx","path":"/solution/reefer-iot/","result":{"pageContext":{"frontmatter":{"title":"The Reefer Simulator as web app","description":"Simple Refrigerator container internet of thing simulator to control temperature, co2, o2 or power sensors to help build dataset or run time monitoring solution."},"relativePagePath":"/solution/reefer-iot/index.mdx","titleType":"append","MdxNode":{"id":"c8a61b4b-4c09-59b5-89a4-36918b72082c","children":[],"parent":"15c0ab85-64ff-50cf-9dab-6880fb4812be","internal":{"content":"---\ntitle: The Reefer Simulator as web app\ndescription: Simple Refrigerator container internet of thing simulator to control temperature, co2, o2 or power sensors to help build dataset or run time monitoring solution.\n---\n\n\n<PageDescription>\nThis Simulator web application is a simple python (3.7) Flask app exposing a REST POST end point to control the type of simulation we want to run and to produce refrigerator container telemetry events to kafka `telemetries` topic.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Anatomy</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n\n### Application requirements\n\nThe simulator is not in the critical path for production like component. It is here to help us develop the other components of the solution as we do not have real life Refrigerator container. Here are the simple user stories for this app:\n\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to start the simulator tool from command line so I can get a csv file with telemetry data\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to be able to simulate co2 sensor, o2 sensor, temperature and power sensor issue so I can get relevant data for the machine learning model to make sense\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to start the simulator tool from command line using parameter so I can get save data to a remote document oriented database: mongodb on IBM cloud.\n1. when I want to demonstrate the solution, I want to call a REST api to control the generation of faulty sensor data so I can get the scoring service returning maintenance needed.\n1. when I want to demonstrate the cold chain violation, I want to call a REST api to control a change to the temperature over a time period so cold chain violation can be identified with a complex event processing or AI model.\n\n ![1](./images/reefer-simul-1.png)\n\nThe simulator needs to integrate with kafka / IBM Event Streams deployed as service on the cloud or deployed on OpenShift cluster using Cloud Pak for Integration.\n\n### Design approach\n\nTo support remote control of the simulator while running as webapp, we define a POST operation on the `/control` URL:\n\n![1](images/simulapp-control-swagger.png)\n\n The Json control object defines the number records to produce, the sensor to impact (co2sensor, temperature, o2sensor, power) , the container ID, (one of C01, C02, C03, C04) which carries the product referenced by product_id (one of P01, P02, P03, P04, P05, covid-19) - The P01 is the covid-19 vaccine:\n\n```json\n    { 'containerID': 'C02',\n    'simulation': 'temperature',\n    'nb_of_records': 4000,\n    \"product_id\":  \"covid-19\"\n    }\n```\n\nWe have tried to support a domain driven design approach to structure the code, with domain, infrastructure and app modules. The domain module has a unique class for the simulator which main goal is to generate data tuples or records for the different simulation types. It is reused by the standalone simulation CLI tool to generate data at rest, if needed.\n\nAs the simulator is also a webapp we need to package it with [Flask](https://www.fullstackpython.com/flask.html) and run it using one of the Web Server Gateway Interface (WSGI) implementation, like [Gunicorn](http://docs.gunicorn.org/).\n\nIf you want to go over the code, ee recommend to follow [Flask tutorial](https://flask.palletsprojects.com/en/1.1.x/tutorial/).\n\nFlask is a simple library to implement REST based microservice and web application in Python. It has other related projects to add interesting features to develop production ready application. The standard development includes defining routes, function to support handling the request and generating HTTP response, but also defining APIs... Read more with the [explore Flask book online](http://exploreflask.com/en/latest/).\n\nFlask is mono threaded so it fits well in a simple web application for development purpose, but for production it is recommended to add a web server like [Gunicorn](https://gunicorn.org/) to handle multiple concurrent requests.\n\n## Anatomy\n\nThe app is done using Flask, blueprint, flasgger, flask_restful, prometheus, confluent_kafka.\n\nThe app.py Flask application imports the different blue prints, server the apidoc and starts the server. Each [Flask blueprints](https://flask.palletsprojects.com/en/1.1.x/blueprints/) is defined in the `api` folder. \n\nThe basic concept of blueprints is that they record operations to execute when each operation is registered on an application. So to add one operation to support a new control, we add a blueprint, and then register it in the main application: `app.py`.\n\n```python\nfrom api.controller import control_blueprint\napp.register_blueprint(control_blueprint)\n```\n\nTo define the API, we use [Flasgger](https://github.com/flasgger/flasgger) as an extension to Flask to extract [Open API specification](https://swagger.io/docs/specification/about/) from the code. It comes with Swagger UI, so we can see the API documentation of the microservice at the URL `/apidocs`.  It can also validate the data according to the schema defined.\n\nFor the POST `/control` we defined the Swagger 2.0 API in a separate file: `api/controlapi.yml` and import it at the method level to support the POST operation. This method is defined in its blueprint as a REST resource. The code [controller.py](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator/blob/master/simulator/api/controller.py) is under `api` folder.\n\nBelow is a code extract to illustrate the use of Flask-RESTful and blueprint and the swagger annotation:\n\n```python\nfrom flasgger import swag_from\nfrom flask_restful import Resource, Api\n\ncontrol_blueprint = Blueprint(\"control\", __name__)\napi = Api(control_blueprint)\n\nclass SimulationController(Resource):\n    @swag_from('controlapi.yml')\n    def post(self):\n        # ..\napi.add_resource(SimulationController, \"/control\")\n```\n\nThe [Pipfile](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator/blob/master/Pipfile) defines the dependencies for this component, and is used by `pipenv` during the docker build process.\n\n\n**Github repository:** [vaccine-reefer-simulator](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator)\n\n**Kafka topics produced to:** telemetries\n\n**Event sents to the topic:**\n\n```python\n{\"containerID\": metric[0],\n\"timestamp\": str(metric[1]),\n\"type\":\"ReeferTelemetries\",\n\"payload\"={ \"timestamp\": \"2019-09-04 T15:31 Z\",\n            \"containerID\": \"C101\",\n            \"product_id\": \"P02\",\n            \"sensors\": {\n              \"temperature\": 2.49647,\n              \"oxygen_level\" : 20.4543,\n              \"nitrogen_level\" : 79.4046,\n              \"carbon_dioxide_level\" : 4.42579,\n              \"humidity_level\" : 60.3148,\n              \"fan_1\": \"True\",\n              \"fan_2\" : \"True\",\n              \"fan_3\" : \"True\",\n              \"ambiant_temperature\": 19.8447\n            },\n            \"content_type\": 1,\n            \"target_temperature\": 6.0,\n            \"kilowatts\": 3.44686,\n            \"latitude\": \"37.8226902168957,\",\n            \"longitude\": \"-122.3248956640928\",\n            \"time_door_open\" : 300,\n            \"defrost_cycle\": 6\n        }\n}\n```\n\n## Build\n\nThis microservice is built using the docker:\n\n```shell\ndocker build -t ibmcase/vaccine-reefer-simulator .\ndocker push ibmcase/vaccine-reefer-simulator\n```\n\n## Run\n\n### Run locally with remote Event Streams on OCP\n\nSee the [readme in the repository](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator#run-locally) to execute the python app within a Dockerfile and remote connected to Evenstreams on OpenShift.\n\n###  Deployment to OpenShift\n\nWe have moved the description on how to deploy to OpenShift in the [cold chain scenario](/use-cases/cold-chain/#deploy-the-vaccine-reefer-simulator). \n\n\n## Demonstrate\n\nOnce deployed, you can access the Swagger-based REST API via the defined route and trigger the simulation controls.\n\n1. To determine the route, use the `oc get route reefer-simulator` command and go to the URL specified in the `HOST/PORT` field in your browser.\n2. From there, drill down into the `POST /control` section and click **Try it out!**.\n3. Enter any of the following options for the fields prepopulated in the `control` body: P01 is the covid-19 vaccine.\n\n    * Container: `C01, C02, C03, C04`\n    * Product: `P01, P02, P03, P04`\n    * Simulation: `poweroff, co2sensor, o2sensor, temperature, normal`\n    * Number of records: A positive integer\n\n4. Click **Execute**\n\n\n## More readings\n\n* [Flask Restful](https://flask-restful.readthedocs.io/en/latest/quickstart.html)\n* [Appsody build and deploy product documentation](https://appsody.dev/docs/using-appsody/building-and-deploying/)\n","type":"Mdx","contentDigest":"c06329f5614c2f0d120d650567af8426","counter":283,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"The Reefer Simulator as web app","description":"Simple Refrigerator container internet of thing simulator to control temperature, co2, o2 or power sensors to help build dataset or run time monitoring solution."},"exports":{},"rawBody":"---\ntitle: The Reefer Simulator as web app\ndescription: Simple Refrigerator container internet of thing simulator to control temperature, co2, o2 or power sensors to help build dataset or run time monitoring solution.\n---\n\n\n<PageDescription>\nThis Simulator web application is a simple python (3.7) Flask app exposing a REST POST end point to control the type of simulation we want to run and to produce refrigerator container telemetry events to kafka `telemetries` topic.\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Anatomy</AnchorLink>\n  <AnchorLink>Build</AnchorLink>\n  <AnchorLink>Run</AnchorLink>\n  <AnchorLink>Usage Details</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\n\n### Application requirements\n\nThe simulator is not in the critical path for production like component. It is here to help us develop the other components of the solution as we do not have real life Refrigerator container. Here are the simple user stories for this app:\n\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to start the simulator tool from command line so I can get a csv file with telemetry data\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to be able to simulate co2 sensor, o2 sensor, temperature and power sensor issue so I can get relevant data for the machine learning model to make sense\n1. when I want to generate mockup telemetries data for my data scientist friend, I want to start the simulator tool from command line using parameter so I can get save data to a remote document oriented database: mongodb on IBM cloud.\n1. when I want to demonstrate the solution, I want to call a REST api to control the generation of faulty sensor data so I can get the scoring service returning maintenance needed.\n1. when I want to demonstrate the cold chain violation, I want to call a REST api to control a change to the temperature over a time period so cold chain violation can be identified with a complex event processing or AI model.\n\n ![1](./images/reefer-simul-1.png)\n\nThe simulator needs to integrate with kafka / IBM Event Streams deployed as service on the cloud or deployed on OpenShift cluster using Cloud Pak for Integration.\n\n### Design approach\n\nTo support remote control of the simulator while running as webapp, we define a POST operation on the `/control` URL:\n\n![1](images/simulapp-control-swagger.png)\n\n The Json control object defines the number records to produce, the sensor to impact (co2sensor, temperature, o2sensor, power) , the container ID, (one of C01, C02, C03, C04) which carries the product referenced by product_id (one of P01, P02, P03, P04, P05, covid-19) - The P01 is the covid-19 vaccine:\n\n```json\n    { 'containerID': 'C02',\n    'simulation': 'temperature',\n    'nb_of_records': 4000,\n    \"product_id\":  \"covid-19\"\n    }\n```\n\nWe have tried to support a domain driven design approach to structure the code, with domain, infrastructure and app modules. The domain module has a unique class for the simulator which main goal is to generate data tuples or records for the different simulation types. It is reused by the standalone simulation CLI tool to generate data at rest, if needed.\n\nAs the simulator is also a webapp we need to package it with [Flask](https://www.fullstackpython.com/flask.html) and run it using one of the Web Server Gateway Interface (WSGI) implementation, like [Gunicorn](http://docs.gunicorn.org/).\n\nIf you want to go over the code, ee recommend to follow [Flask tutorial](https://flask.palletsprojects.com/en/1.1.x/tutorial/).\n\nFlask is a simple library to implement REST based microservice and web application in Python. It has other related projects to add interesting features to develop production ready application. The standard development includes defining routes, function to support handling the request and generating HTTP response, but also defining APIs... Read more with the [explore Flask book online](http://exploreflask.com/en/latest/).\n\nFlask is mono threaded so it fits well in a simple web application for development purpose, but for production it is recommended to add a web server like [Gunicorn](https://gunicorn.org/) to handle multiple concurrent requests.\n\n## Anatomy\n\nThe app is done using Flask, blueprint, flasgger, flask_restful, prometheus, confluent_kafka.\n\nThe app.py Flask application imports the different blue prints, server the apidoc and starts the server. Each [Flask blueprints](https://flask.palletsprojects.com/en/1.1.x/blueprints/) is defined in the `api` folder. \n\nThe basic concept of blueprints is that they record operations to execute when each operation is registered on an application. So to add one operation to support a new control, we add a blueprint, and then register it in the main application: `app.py`.\n\n```python\nfrom api.controller import control_blueprint\napp.register_blueprint(control_blueprint)\n```\n\nTo define the API, we use [Flasgger](https://github.com/flasgger/flasgger) as an extension to Flask to extract [Open API specification](https://swagger.io/docs/specification/about/) from the code. It comes with Swagger UI, so we can see the API documentation of the microservice at the URL `/apidocs`.  It can also validate the data according to the schema defined.\n\nFor the POST `/control` we defined the Swagger 2.0 API in a separate file: `api/controlapi.yml` and import it at the method level to support the POST operation. This method is defined in its blueprint as a REST resource. The code [controller.py](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator/blob/master/simulator/api/controller.py) is under `api` folder.\n\nBelow is a code extract to illustrate the use of Flask-RESTful and blueprint and the swagger annotation:\n\n```python\nfrom flasgger import swag_from\nfrom flask_restful import Resource, Api\n\ncontrol_blueprint = Blueprint(\"control\", __name__)\napi = Api(control_blueprint)\n\nclass SimulationController(Resource):\n    @swag_from('controlapi.yml')\n    def post(self):\n        # ..\napi.add_resource(SimulationController, \"/control\")\n```\n\nThe [Pipfile](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator/blob/master/Pipfile) defines the dependencies for this component, and is used by `pipenv` during the docker build process.\n\n\n**Github repository:** [vaccine-reefer-simulator](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator)\n\n**Kafka topics produced to:** telemetries\n\n**Event sents to the topic:**\n\n```python\n{\"containerID\": metric[0],\n\"timestamp\": str(metric[1]),\n\"type\":\"ReeferTelemetries\",\n\"payload\"={ \"timestamp\": \"2019-09-04 T15:31 Z\",\n            \"containerID\": \"C101\",\n            \"product_id\": \"P02\",\n            \"sensors\": {\n              \"temperature\": 2.49647,\n              \"oxygen_level\" : 20.4543,\n              \"nitrogen_level\" : 79.4046,\n              \"carbon_dioxide_level\" : 4.42579,\n              \"humidity_level\" : 60.3148,\n              \"fan_1\": \"True\",\n              \"fan_2\" : \"True\",\n              \"fan_3\" : \"True\",\n              \"ambiant_temperature\": 19.8447\n            },\n            \"content_type\": 1,\n            \"target_temperature\": 6.0,\n            \"kilowatts\": 3.44686,\n            \"latitude\": \"37.8226902168957,\",\n            \"longitude\": \"-122.3248956640928\",\n            \"time_door_open\" : 300,\n            \"defrost_cycle\": 6\n        }\n}\n```\n\n## Build\n\nThis microservice is built using the docker:\n\n```shell\ndocker build -t ibmcase/vaccine-reefer-simulator .\ndocker push ibmcase/vaccine-reefer-simulator\n```\n\n## Run\n\n### Run locally with remote Event Streams on OCP\n\nSee the [readme in the repository](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator#run-locally) to execute the python app within a Dockerfile and remote connected to Evenstreams on OpenShift.\n\n###  Deployment to OpenShift\n\nWe have moved the description on how to deploy to OpenShift in the [cold chain scenario](/use-cases/cold-chain/#deploy-the-vaccine-reefer-simulator). \n\n\n## Demonstrate\n\nOnce deployed, you can access the Swagger-based REST API via the defined route and trigger the simulation controls.\n\n1. To determine the route, use the `oc get route reefer-simulator` command and go to the URL specified in the `HOST/PORT` field in your browser.\n2. From there, drill down into the `POST /control` section and click **Try it out!**.\n3. Enter any of the following options for the fields prepopulated in the `control` body: P01 is the covid-19 vaccine.\n\n    * Container: `C01, C02, C03, C04`\n    * Product: `P01, P02, P03, P04`\n    * Simulation: `poweroff, co2sensor, o2sensor, temperature, normal`\n    * Number of records: A positive integer\n\n4. Click **Execute**\n\n\n## More readings\n\n* [Flask Restful](https://flask-restful.readthedocs.io/en/latest/quickstart.html)\n* [Appsody build and deploy product documentation](https://appsody.dev/docs/using-appsody/building-and-deploying/)\n","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/solution/reefer-iot/index.mdx"}}}}