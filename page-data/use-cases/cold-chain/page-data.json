{"componentChunkName":"component---src-pages-use-cases-cold-chain-index-mdx","path":"/use-cases/cold-chain/","result":{"pageContext":{"frontmatter":{"title":"Cold-chain monitoring","description":"Cold-chain monitoring"},"relativePagePath":"/use-cases/cold-chain/index.mdx","titleType":"append","MdxNode":{"id":"c6897775-71a8-56a6-bcb0-4f67274e7c34","children":[],"parent":"5c1ac8d6-806f-50f3-aae8-6be814af7df0","internal":{"content":"---\ntitle: Cold-chain monitoring\ndescription: Cold-chain monitoring\n---\n\n- UPDATED 03/21/2021\n\nThe vaccine lots need to be kept at a constant temperature from the manufacturing to the delivery time period. The sensor telemetry data coming from the refrigerated shipping containers is processed to assess cold-chain violations.\n\nThe solution for this use case includes streaming telemetry events, a stateful microservice to implement aggregation & alarm generation, and integration with a microservice to log issues against the refrigerated shipping container, and a Freezer manager service.\n\n## Components involved in this use case\n\n* [Vaccine Refrigerator container Simulator](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator)\n* [Vaccine Reefer Monitoring Agent](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent)\n* [IBM Event Streams](https://ibm.github.io/event-streams/) or Strimzi Kafka\n* [Freezer manager service](https://github.com/ibm-cloud-architecture/vaccine-freezer-mgr).\n\n![Architecture diagram](./images/cc-components.png)\n\n*\\*The reefer manager is not done yet*\n\n### Understand the components\n\n* The Reefer simulator is a python Flask app, which supports simple API to control the Refrigerator container simulation. It is described in [this note](/solution/reefer-iot/), also see next section to deploy it on OpenShift.\n* The Monitoring Agent is a Quarkus app, using Kafka Streams, and microprofile reactive messaging to monitor the telemetries and assess any cold chain violation via stateful logic. For each uniquely identified refrigerator, it keeps the last measured temperatures and compute some min, max, average and the total number of concutives violated records: temperature above a Threshold. It may potentially call an Anomaly detection scoring service deployed on Watson ML service. We describe this scenario in another use case. To read more on the monitoring agent, see [the implementation  note](/solution/cold-monitoring/).\n* The [Freezer manager service](https://github.com/ibm-cloud-architecture/vaccine-freezer-mgr)) is a simple quarkus app with Reactive messaging to process the alerts and support the Freezer inventory.\n\n## Run on OpenShift\n\n### Pre-requisites\n\n1. You need an existing OpenShift Cluster with administrator access.\n1. We can use Kafka 2.6 open source using the Strimzi operator, or Event Streams Operator as part of Cloud Pak for Integration. \n1. If you are sharing the IBM Event Streams instance with other people for this tutorial, you may want to add a unique suffix to the name of the resources to be created next, such as topics, projects, etc. If so, make sure you provide the appropriate name for these throught the rest of the tutorial.\n1. If you want to use Strimzi, you can deploy it within your own project.\n1. Clone the vaccine-gitops repository:\n\n```shell\ngit clone https://github.com/ibm-cloud-architecture/vaccine-gitops\n```\n1. Create a new project to deploy of all components. This will be refered as `YOUR_PROJECT_NAME` throughout the rest of this tutorial. For the instructions on this tutorial, we use the project name: `vaccine-solution`.\n1. [OpenShift CLI](https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-cli) on your local environment.\n1. [jq](https://stedolan.github.io/jq/) on your local environment.\n1. [Kustomize](https://kubectl.docs.kubernetes.io/installation/kustomize/) for one script deploy\n1. Use a Terminal and the `oc` cli.    \n\n\n### Strimzi - One Click Deploy\n\nGo to `vaccine-gitops` folder and do the following steps:\n\n* Set your personal deployment parameters within the   `scripts/env-strimzi.sh` file. Normally only the name of the YOUR_PROJECT_NAME and KAFKA_NS needs to be changed.\n\n  * KAFKA_NS to the name of the project where you will deploy Strimzi and the solution (`vaccine-solution`)\n  * YOUR_PROJECT_NAME to the name of the project (`vaccine-solution`).\n* Use the `oc login --token...  --server ....` command to log to the OpenShift cluster. (From the OpenShift admin console, top right menu)\n* Be sure to be in your project:\n\n```shell\noc project vaccine-solution\n```\n\n* Start `./scripts/deployColdChainWithStrimzi.sh --skip-login`\n* The following pods should be up and running:\n\n ```shell\n  NAME                                            READY   STATUS    \n  reefer-monitoring-agent-7dd5f7ccd9-z4cf9         1/1     Running  \n  vaccine-reefer-simulator-669c5f5d8b-7mms4        1/1     Running  \n  freezer-mgr-1-7x979                              1/1     Running  \n  vaccine-kafka-cruise-control-76d68b845f-zqx6d    2/2     Running   \n  vaccine-kafka-entity-operator-76f94d4d6d-zfr59   3/3     Running   \n  vaccine-kafka-kafka-0                            1/1     Running  \n  vaccine-kafka-kafka-1                            1/1     Running   \n  vaccine-kafka-kafka-2                            1/1     Running   \n  vaccine-kafka-zookeeper-0                        1/1     Running     0          34h\n  vaccine-kafka-zookeeper-1                        1/1     Running     0          34h\n  vaccine-kafka-zookeeper-2                        1/1     Running     0          34h\n  vaccine-reefer-simulator-85dfb448c7-w78zh        1/1     Running     0          15h\n ```\n\nIf you go to the OpenShift Console, and the Installed Operator within your project, you should have the Strimzi operator console and the elements created:\n\n![](./images/strimzi-console.png)\n\n\n* Go to the [demonstration section](#scenario-script) to run the demo.\n\n### Event Streams - One Click Deploy\n\n* Set the project name in the `scripts/env.sh`:\n* Run the command: \n\n```shell\n./scripts/deployColdChainWithEventStreams.sh --skip-login\n```\n\n* Verify in the Event Streams console the created topics\n* Go to the [demonstration section](#scenario-script) to run the demo.\n\n### Deploy the solution manually\n\nIf you want to do this scenario as a lab, then this section addresses how to build and deploy the components to OpenShift:\n\n#### Set Event streams resources\n\n1. Define your OpenShift project name (Kubernetes namespace) as environment variable:\n\n  ```shell\n  export PROJECT_NAME=<YOUR_PROJECT_NAME>\n  oc project ${PROJECT_NAME}\n  ```\n\n1. Export the value of your Event Streams cluster name and the namespace it is installed on to environment variables:\n\n  ```shell\n  export CLUSTER_NAME=<YOUR_CLUSTER_NAME>\n  export EVENTSTREAMS_NS=<YOUR_EVENT_STREAMS_NAMESPACE>\n  ```\n\n  where\n\n   - `<YOUR_EVENT_STREAMS_NAMESPACE>` is the name where you installed your IBM Event Streams instance in the [pre-requisites](#pre-requisites) section above.\n   - `<YOUR_CLUSTER_NAME>` is the name of your IBM Event Streams cluster which can be found with the following `oc` command:\n\n   ```shell\n   $ oc get eventstreams -n ${EVENTSTREAMS_NS}\n   NAME           STATUS\n   eda-dev    Ready\n   ```\n1. Create users and topics using the gitops environment:\n\n```shell\noc apply -k environments/event-streams\n```\n\n1. Copy the server-side public TLS certificate of your IBM Event Streams instance to your local project so that the Vaccine Reefer Simulator application is able to establish secure connection with your IBM Event Streams instance:\n\n  ```shell\n  oc get secret ${CLUSTER_NAME}-cluster-ca-cert -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"kafka-cluster-ca-cert\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n  _\\*NOTE: We are copying and renaming the certificate in a single command to minimize the need for editing deployment documents. That is, we are providing the server-side TLS certificate in the secret the Vaccine Reefer Simulator and the Vaccine Monitoring Agent microservices are expecting to find it._\n\n#### Deploy the Freezer manager service\n\nDefine the `freezer-mgr-secret` secret:\n\n```shell\n  oc create secret generic freezer-mgr-secret \\\n    --from-literal=KAFKA_BOOTSTRAP_SERVERS=$INTERNAL_KAFKA_BOOTSTRAP_SERVERS \\\n    --from-literal=REEFER_TOPIC=$YOUR_REEFER_TOPIC \\\n    --from-literal=ALERTS_TOPIC=$YOUR_ALERT_TOPIC \\\n    --from-literal=KAFKA_USER=$TLS_USER \\\n    --from-literal=KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert \n```\n\nIn the gitops repository do the following command:\n\n```shell\noc apply -k apps/freezer-mgr/\n```\n\nVerify the pods runs: \n\n```shell\noc get pods | grep freezer\n```\n\nGet the URL:\n\n```\nFREEZER_URL=$(oc get route freezer-mgr -o jsonpath=\"https://{.status.ingress[0].host}\")\n```\n\nAnd get the list of predefined Refrigerators containers:\n\n```\ncurl -X GET $FREEZER_URL/reefers\n```\n\nExpected results:\n```\n[{\"brand\":\"Binder\",\"capacity\":80,\"reeferID\":\"C02\",\"status\":\"Empty\",\"type\":\"B12\"},\n{\"brand\":\"Binder\",\"capacity\":100,\"reeferID\":\"C01\",\"status\":\"Empty\",\"type\":\"B13\"},\n{\"brand\":\"Binder\",\"capacity\":100,\"reeferID\":\"C03\",\"status\":\"Empty\",\"type\":\"B13\"}]\n```\n\n#### Deploy the Vaccine Reefer Simulator\n\nTo get more details of this Python Flask application [read this note](/solution/reefer-iot/).\n\n* Define the  `reefer-simul-secret` secret as:\n\n```shell\noc create secret generic reefer-simul-secret \\\n  --from-literal=KAFKA_BOOTSTRAP_SERVERS=$EXTERNAL_KAFKA_BOOTSTRAP_SERVERS \n```\n\n  where\n\n   - `<YOUR_KAFKA_BOOTSTRAP_EXTERNAL_ADDRESS>` is your IBM Event Streams **External** cluster bootstrap address presented to you during the creation of your SCRAM-based KafkaUser you went through in the [pre-requisites](#pre-requisites) section. You can get that value again by executing the following `oc` command:\n    ```shell\n    oc get route -n ${EVENTSTREAMS_NS} ${CLUSTER_NAME}-kafka-bootstrap -o jsonpath=\"{.status.ingress[0].host}:443\"\n    ```\n  \n1. Compile, build the docker image and push to the registry\n\n  ```shell\n  # In the vaccine simulator project\n  docker build -t ibmcase/vaccine-reefer-simulator  .\n  docker push ibmcase/vaccine-reefer-simulator\n  ```\n\n1. Deploy Vaccine Reefer Simulator microservice components (application plus a service and a route to make it accessible) via the following `oc apply` command:\n\n  ```shell\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-reefer-simulator/master/config/deployment.yaml\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-reefer-simulator/master/config/deployment.yaml\n  ```\n\n   - You should see the following output:\n\n   ```shell\n   service/vaccine-reefer-simulator created\n   route.route.openshift.io/vaccine-reefer-simulator created\n   odeployment.apps/vaccine-reefer-simulator created\n   ```\n\n   - You can verify the deployment state with the following `oc` command:\n\n   ```shell\n   oc get pods\n   NAME                                       READY   STATUS    RESTARTS   AGE\n   vaccine-reefer-simulator-7dcfcf5cb-4nvl7   1/1     Running   0          5m55s\n   ```\n\n   or the via the Openshift console:\n\n   ![2](./images/simul-app-ocp.png)\n\n  \\*_NOTE: If you want to build from scratch, clone [the repository](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator) and follow the README._\n\n1. Get the route to access the Vaccine Reefer Simulator application with the `oc get routes` command.\n\n\n#### Deploy the Vaccine Monitoring Agent\n\nTo get more detail of this Java Quarkus microprofile application [read this note](/solution/cold-monitoring/). The project repository is in this [GitHub repository](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent). Follow the steps below to get the Vaccine Monitoring Agent microservice deployed on your OpenShift cluster:\n\n\n1. Ensure you are working inside the correct project via the following `oc` command:\n\n  ```shell\n  oc project ${PROJECT_NAME}\n  ```\n\n1. Export the value of your TLS-based KafkaUser name and a unique identifier for the reources to be created into your OpenShift cluster as environment variables so that the following steps in this section can make use of these.\n\n  ```shell\n  export TLS_USER=<YOUR_TLS_USER>\n  # we use tls-user\n  export YOUR_SUFFIX=<UNIQUE_IDENTIFIER>\n  ```\n\n  where\n\n   - `<YOUR_TLS_USER>` is the name you gave when creating the tls credentials in the [pre-requisites](#pre-requisites) section. If you don't remember the tls KafkaUser you created, you can check it out with the following `oc` command:\n    ```shell\n    $ oc get kafkausers -n ${EVENTSTREAMS_NS}\n    NAME                  CLUSTER         AUTHENTICATION   AUTHORIZATION\n    tls-user             eda-dev     tls              simple\n    ```\n    _\\*NOTE: We are copying and renaming the credentials in a single command to minimize the need for editing deployment documents._\n   - `<UNIQUE_IDENTIFIER>` is a unique identifier of your choice to be used as the suffix for any resource created in OpenShift and IBM Event Streams so that it does not collide with anyone else also completing this tutorial.\n\n1. If not done so already in the previous section where we deployed the Vaccine Reefer Simulator microservice, copy the server-side public certificate of the Event Streams instance to your local project:\n\n  ```shell\n  oc get secret ${CLUSTER_NAME}-cluster-ca-cert -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"kafka-cluster-ca-cert\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n  _\\*NOTE: We are copying and renaming the certificate in a single command to minimize the need for editing deployment documents. That is, we are providing the server-side TLS certificate in the secret the Vaccine Reefer Simulator and the Vaccine Monitoring Agent microservices are expecting to find it._\n\n1. Copy your TLS-based KafkaUser's credentials you created in the [pre-requisites](#pre-requisites) section to the local namespace with the following `oc` command:\n\n  ```shell\n  oc get secret ${TLS_USER} -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"tls\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n\n1. Create a ConfigMap named `agent-cm` to hold the configuration for the Vaccine Monitoring Agent microservice with the following `oc` command:\n\n  ```shell\n  oc create configmap agent-cm \\\n  --from-literal=REEFER_TOPIC=<YOUR_REEFER_TOPIC> \\\n  --from-literal=TELEMETRY_TOPIC=<YOUR_TELEMETRY_TOPIC> \\\n  --from-literal=KAFKA_BOOTSTRAP_SERVERS=${CLUSTER_NAME}-kafka-bootstrap.${EVENTSTREAMS_NS}.svc:9093 \\\n  --from-literal=QUARKUS_KAFKA_STREAMS_APPLICATION_ID=cold-chain-agent-${YOUR_SUFFIX} \\\n  --from-literal=KAFKA_SECURITY_PROTOCOL=SSL \\\n  --from-literal=TEMPERATURE_THRESHOLD=-30.0 \\\n  --from-literal=PREDICTION_ENABLED=false\n  ```\n\n  where\n\n   - `<YOUR_REEFER_TOPIC>` is the name of the topic that will get the vaccine cold chain temperature violation alert events that you created in the [pre-requisites](#pre-requisites) section.\n   - `<YOUR_TELEMETRY_TOPIC>` is the name of the topic that will get the container telemetries events that you created in the [pre-requisites](#pre-requisites) section.\n   - `<ARE_PREDICTIONS_ENABLED>` will be **true** or **false** depending on whether you completed the [Developing the Anomaly Detection Model with Watson Studio](/analyze/ws-ml-dev/) section or not. If you are not sure, set it to **false**.\n\n1. Deploy Vaccine Monitoring Agent microservice by executing the following `oc` command:\n\n  ```shell\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-monitoring-agent/master/src/main/kubernetes/deployment.yml\n  ```\n\n  You should see the following output:\n\n  ```shell\n  serviceaccount/reefer-monitoring-agent created\n  service/reefer-monitoring-agent created\n  rolebinding.rbac.authorization.k8s.io/reefer-monitoring-agent-view created\n  imagestream.image.openshift.io/openjdk-11 created\n  deploymentconfig.apps.openshift.io/reefer-monitoring-agent created\n  route.route.openshift.io/reefer-monitoring-agent created\n  ```\n\n## Scenario script\n\nOnce the solution is up and running, execute the following steps to present an end-to-end demonstration:\n\n### Generate vaccine container telemetry events\n\n1. Obtain the Vaccine Reefer Simulator's  UI via the following `oc` command:\n\n  ```shell\n  oc get route vaccine-reefer-simulator -o jsonpath=\"https://{.status.ingress[0].host}\" && echo \n  ```\n\n1. Open the above url in your web browser to access the user interface \n\n\n  ![flasgger1](./images/simulator.png)\n\n1. In the **Edit Value** text box, update the values of the records accordingly:\n\n   ```shell\n   {\n      \"containerID\": \"C21\",\n      \"nb_of_records\": 300,\n      \"product_id\": \"covid-19\",\n      \"simulation\": \"tempgrowth\"\n    }\n   ```\n\nAfter sometime the temperature grows up to the ambiant temperature and an Alerts should come in the table.\n\n### Analyze simulated reefer telemetry data\n\n1. Obtain your IBM Event Streams Console UI's url via the following `oc` command:\n\n  ```shell\n  oc get route -n ${EVENTSTREAMS_NS} ${CLUSTER_NAME}-ibm-es-ui -o jsonpath=\"https://{.status.ingress[0].host}\"\n  ```\n\n1. Open your IBM Event Streams Console UI by pointing your browser to the above url.\n\n1. Click on **Topics** from the left navigation menu and select your `YOUR_TELEMETRY_TOPIC` you created in the [pre-requisites](#pre-requisites) section from the topic list.\n\n1. Explore the messages tab and the individual telemetry records emitted by the Vaccine Reefer Simulator component.\n\n  ![messages](./images/messages.png)\n\n### Analyze generated cold-chain violations\n\n1. Open your IBM Event Streams Console UI by pointing your browser to the above url.\n\n1. Click on **Topics** from the left navigation menu and select your `YOUR_ALERT_TOPIC`.\n\n1. Explore the messages tab and the observed vaccine cold-chain violation alert events.\n\n  ![messages2](./images/messages2.png)\n\n1. The reefer container information contained in this topic have been identified as having observed temperatures outside the allowable range more than the allowable number of times, as determined to preserve the state of the vaccine doses contained.\n\n1. Get the route to the Vaccine Monitoring Agent microservice with the following `oc` command:\n\n  ```shell\n  oc get route reefer-monitoring-agent -o jsonpath=\"https://{.status.ingress[0].host}\"\n  ```\n\n1. Point your browser to the `/swagger-ui` Swagger API endpoint that the Vaccine Monitoring Agent microservice exposes by using the above url. That is, point your browser to `<URL>/swagger-ui/`\n\n  ![messages3](./images/messages3.png)\n\n1. Click on the first API endpoint definition the Swagger UI lists (`/reefer-tracker/data/{reeferID}`) that would allow us to query the Vaccine Monitoring Agent microservice to retrieve the monitoring data for a specific reefer container ID.\n\n1. Once this API endpoint definition gets expanded, click on the **Try it out** button on the top right corner. That will make the `reeferID` text input box active. Insert the reefer ID you used in the previous [Generate vaccine container telemetry events](#generate-vaccine-container-telemetry-events) section to simulate telemetries for and click on **Execute**. You should see the monitoring data for that reefer container similar to the following picture:\n\n  ![messages4](./images/messages4.png)\n\n  where you will see in the reponse body a json object representing the monitoring data for the reefer container you requested it for. You will be able to see if there has been any cold chain temperature violations, how many, the last temperatures, etc...\n\n\n### Clearing the project\n\nTo delete the different resources we have created on your OpenShift cluster throughout this tutorial do the following:\n\n```shell\noc delete -k apps/cold-chain-use-case/\noc delete project ${PROJECT_NAME}\n```\n\nFinally, delete all the topics created in your IBM Event Streams instance. These are your `YOUR_TELEMETRY_TOPIC` and `YOUR_REEFER_TOPIC` you created in the [pre-requisites](#pre-requisites) section. The other two are internal topics created as a result of the Kafka Streams stateful operations being done in the Vaccine Monitoring Agent microservice code (see [here](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent/blob/master/src/main/java/ibm/gse/eda/vaccine/coldchainagent/domain/TelemetryAssessor.java#L86-L133) for more detail on those). These two internal topics should have the following names:\n\n```shell\ncold-chain-agent-<YOUR_SUFFIX>-reeferAggregateTable-changelog\ncold-chain-agent-<YOUR_SUFFIX>-reeferAggregateTable-repartition\n```\n\nTo delete these topics, you simply need to go to your IBM Event Streams instance UI dashboard, click on topics on the left hand side navigation menu, click on the three-dots options button that appears on the right hand side of each of the topics in the topics list and select delete.\n","type":"Mdx","contentDigest":"63f03ae23df4ff6d612d553ea7b7f140","counter":330,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Cold-chain monitoring","description":"Cold-chain monitoring"},"exports":{},"rawBody":"---\ntitle: Cold-chain monitoring\ndescription: Cold-chain monitoring\n---\n\n- UPDATED 03/21/2021\n\nThe vaccine lots need to be kept at a constant temperature from the manufacturing to the delivery time period. The sensor telemetry data coming from the refrigerated shipping containers is processed to assess cold-chain violations.\n\nThe solution for this use case includes streaming telemetry events, a stateful microservice to implement aggregation & alarm generation, and integration with a microservice to log issues against the refrigerated shipping container, and a Freezer manager service.\n\n## Components involved in this use case\n\n* [Vaccine Refrigerator container Simulator](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator)\n* [Vaccine Reefer Monitoring Agent](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent)\n* [IBM Event Streams](https://ibm.github.io/event-streams/) or Strimzi Kafka\n* [Freezer manager service](https://github.com/ibm-cloud-architecture/vaccine-freezer-mgr).\n\n![Architecture diagram](./images/cc-components.png)\n\n*\\*The reefer manager is not done yet*\n\n### Understand the components\n\n* The Reefer simulator is a python Flask app, which supports simple API to control the Refrigerator container simulation. It is described in [this note](/solution/reefer-iot/), also see next section to deploy it on OpenShift.\n* The Monitoring Agent is a Quarkus app, using Kafka Streams, and microprofile reactive messaging to monitor the telemetries and assess any cold chain violation via stateful logic. For each uniquely identified refrigerator, it keeps the last measured temperatures and compute some min, max, average and the total number of concutives violated records: temperature above a Threshold. It may potentially call an Anomaly detection scoring service deployed on Watson ML service. We describe this scenario in another use case. To read more on the monitoring agent, see [the implementation  note](/solution/cold-monitoring/).\n* The [Freezer manager service](https://github.com/ibm-cloud-architecture/vaccine-freezer-mgr)) is a simple quarkus app with Reactive messaging to process the alerts and support the Freezer inventory.\n\n## Run on OpenShift\n\n### Pre-requisites\n\n1. You need an existing OpenShift Cluster with administrator access.\n1. We can use Kafka 2.6 open source using the Strimzi operator, or Event Streams Operator as part of Cloud Pak for Integration. \n1. If you are sharing the IBM Event Streams instance with other people for this tutorial, you may want to add a unique suffix to the name of the resources to be created next, such as topics, projects, etc. If so, make sure you provide the appropriate name for these throught the rest of the tutorial.\n1. If you want to use Strimzi, you can deploy it within your own project.\n1. Clone the vaccine-gitops repository:\n\n```shell\ngit clone https://github.com/ibm-cloud-architecture/vaccine-gitops\n```\n1. Create a new project to deploy of all components. This will be refered as `YOUR_PROJECT_NAME` throughout the rest of this tutorial. For the instructions on this tutorial, we use the project name: `vaccine-solution`.\n1. [OpenShift CLI](https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-cli) on your local environment.\n1. [jq](https://stedolan.github.io/jq/) on your local environment.\n1. [Kustomize](https://kubectl.docs.kubernetes.io/installation/kustomize/) for one script deploy\n1. Use a Terminal and the `oc` cli.    \n\n\n### Strimzi - One Click Deploy\n\nGo to `vaccine-gitops` folder and do the following steps:\n\n* Set your personal deployment parameters within the   `scripts/env-strimzi.sh` file. Normally only the name of the YOUR_PROJECT_NAME and KAFKA_NS needs to be changed.\n\n  * KAFKA_NS to the name of the project where you will deploy Strimzi and the solution (`vaccine-solution`)\n  * YOUR_PROJECT_NAME to the name of the project (`vaccine-solution`).\n* Use the `oc login --token...  --server ....` command to log to the OpenShift cluster. (From the OpenShift admin console, top right menu)\n* Be sure to be in your project:\n\n```shell\noc project vaccine-solution\n```\n\n* Start `./scripts/deployColdChainWithStrimzi.sh --skip-login`\n* The following pods should be up and running:\n\n ```shell\n  NAME                                            READY   STATUS    \n  reefer-monitoring-agent-7dd5f7ccd9-z4cf9         1/1     Running  \n  vaccine-reefer-simulator-669c5f5d8b-7mms4        1/1     Running  \n  freezer-mgr-1-7x979                              1/1     Running  \n  vaccine-kafka-cruise-control-76d68b845f-zqx6d    2/2     Running   \n  vaccine-kafka-entity-operator-76f94d4d6d-zfr59   3/3     Running   \n  vaccine-kafka-kafka-0                            1/1     Running  \n  vaccine-kafka-kafka-1                            1/1     Running   \n  vaccine-kafka-kafka-2                            1/1     Running   \n  vaccine-kafka-zookeeper-0                        1/1     Running     0          34h\n  vaccine-kafka-zookeeper-1                        1/1     Running     0          34h\n  vaccine-kafka-zookeeper-2                        1/1     Running     0          34h\n  vaccine-reefer-simulator-85dfb448c7-w78zh        1/1     Running     0          15h\n ```\n\nIf you go to the OpenShift Console, and the Installed Operator within your project, you should have the Strimzi operator console and the elements created:\n\n![](./images/strimzi-console.png)\n\n\n* Go to the [demonstration section](#scenario-script) to run the demo.\n\n### Event Streams - One Click Deploy\n\n* Set the project name in the `scripts/env.sh`:\n* Run the command: \n\n```shell\n./scripts/deployColdChainWithEventStreams.sh --skip-login\n```\n\n* Verify in the Event Streams console the created topics\n* Go to the [demonstration section](#scenario-script) to run the demo.\n\n### Deploy the solution manually\n\nIf you want to do this scenario as a lab, then this section addresses how to build and deploy the components to OpenShift:\n\n#### Set Event streams resources\n\n1. Define your OpenShift project name (Kubernetes namespace) as environment variable:\n\n  ```shell\n  export PROJECT_NAME=<YOUR_PROJECT_NAME>\n  oc project ${PROJECT_NAME}\n  ```\n\n1. Export the value of your Event Streams cluster name and the namespace it is installed on to environment variables:\n\n  ```shell\n  export CLUSTER_NAME=<YOUR_CLUSTER_NAME>\n  export EVENTSTREAMS_NS=<YOUR_EVENT_STREAMS_NAMESPACE>\n  ```\n\n  where\n\n   - `<YOUR_EVENT_STREAMS_NAMESPACE>` is the name where you installed your IBM Event Streams instance in the [pre-requisites](#pre-requisites) section above.\n   - `<YOUR_CLUSTER_NAME>` is the name of your IBM Event Streams cluster which can be found with the following `oc` command:\n\n   ```shell\n   $ oc get eventstreams -n ${EVENTSTREAMS_NS}\n   NAME           STATUS\n   eda-dev    Ready\n   ```\n1. Create users and topics using the gitops environment:\n\n```shell\noc apply -k environments/event-streams\n```\n\n1. Copy the server-side public TLS certificate of your IBM Event Streams instance to your local project so that the Vaccine Reefer Simulator application is able to establish secure connection with your IBM Event Streams instance:\n\n  ```shell\n  oc get secret ${CLUSTER_NAME}-cluster-ca-cert -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"kafka-cluster-ca-cert\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n  _\\*NOTE: We are copying and renaming the certificate in a single command to minimize the need for editing deployment documents. That is, we are providing the server-side TLS certificate in the secret the Vaccine Reefer Simulator and the Vaccine Monitoring Agent microservices are expecting to find it._\n\n#### Deploy the Freezer manager service\n\nDefine the `freezer-mgr-secret` secret:\n\n```shell\n  oc create secret generic freezer-mgr-secret \\\n    --from-literal=KAFKA_BOOTSTRAP_SERVERS=$INTERNAL_KAFKA_BOOTSTRAP_SERVERS \\\n    --from-literal=REEFER_TOPIC=$YOUR_REEFER_TOPIC \\\n    --from-literal=ALERTS_TOPIC=$YOUR_ALERT_TOPIC \\\n    --from-literal=KAFKA_USER=$TLS_USER \\\n    --from-literal=KAFKA_CA_CERT_NAME:kafka-cluster-ca-cert \n```\n\nIn the gitops repository do the following command:\n\n```shell\noc apply -k apps/freezer-mgr/\n```\n\nVerify the pods runs: \n\n```shell\noc get pods | grep freezer\n```\n\nGet the URL:\n\n```\nFREEZER_URL=$(oc get route freezer-mgr -o jsonpath=\"https://{.status.ingress[0].host}\")\n```\n\nAnd get the list of predefined Refrigerators containers:\n\n```\ncurl -X GET $FREEZER_URL/reefers\n```\n\nExpected results:\n```\n[{\"brand\":\"Binder\",\"capacity\":80,\"reeferID\":\"C02\",\"status\":\"Empty\",\"type\":\"B12\"},\n{\"brand\":\"Binder\",\"capacity\":100,\"reeferID\":\"C01\",\"status\":\"Empty\",\"type\":\"B13\"},\n{\"brand\":\"Binder\",\"capacity\":100,\"reeferID\":\"C03\",\"status\":\"Empty\",\"type\":\"B13\"}]\n```\n\n#### Deploy the Vaccine Reefer Simulator\n\nTo get more details of this Python Flask application [read this note](/solution/reefer-iot/).\n\n* Define the  `reefer-simul-secret` secret as:\n\n```shell\noc create secret generic reefer-simul-secret \\\n  --from-literal=KAFKA_BOOTSTRAP_SERVERS=$EXTERNAL_KAFKA_BOOTSTRAP_SERVERS \n```\n\n  where\n\n   - `<YOUR_KAFKA_BOOTSTRAP_EXTERNAL_ADDRESS>` is your IBM Event Streams **External** cluster bootstrap address presented to you during the creation of your SCRAM-based KafkaUser you went through in the [pre-requisites](#pre-requisites) section. You can get that value again by executing the following `oc` command:\n    ```shell\n    oc get route -n ${EVENTSTREAMS_NS} ${CLUSTER_NAME}-kafka-bootstrap -o jsonpath=\"{.status.ingress[0].host}:443\"\n    ```\n  \n1. Compile, build the docker image and push to the registry\n\n  ```shell\n  # In the vaccine simulator project\n  docker build -t ibmcase/vaccine-reefer-simulator  .\n  docker push ibmcase/vaccine-reefer-simulator\n  ```\n\n1. Deploy Vaccine Reefer Simulator microservice components (application plus a service and a route to make it accessible) via the following `oc apply` command:\n\n  ```shell\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-reefer-simulator/master/config/deployment.yaml\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-reefer-simulator/master/config/deployment.yaml\n  ```\n\n   - You should see the following output:\n\n   ```shell\n   service/vaccine-reefer-simulator created\n   route.route.openshift.io/vaccine-reefer-simulator created\n   odeployment.apps/vaccine-reefer-simulator created\n   ```\n\n   - You can verify the deployment state with the following `oc` command:\n\n   ```shell\n   oc get pods\n   NAME                                       READY   STATUS    RESTARTS   AGE\n   vaccine-reefer-simulator-7dcfcf5cb-4nvl7   1/1     Running   0          5m55s\n   ```\n\n   or the via the Openshift console:\n\n   ![2](./images/simul-app-ocp.png)\n\n  \\*_NOTE: If you want to build from scratch, clone [the repository](https://github.com/ibm-cloud-architecture/vaccine-reefer-simulator) and follow the README._\n\n1. Get the route to access the Vaccine Reefer Simulator application with the `oc get routes` command.\n\n\n#### Deploy the Vaccine Monitoring Agent\n\nTo get more detail of this Java Quarkus microprofile application [read this note](/solution/cold-monitoring/). The project repository is in this [GitHub repository](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent). Follow the steps below to get the Vaccine Monitoring Agent microservice deployed on your OpenShift cluster:\n\n\n1. Ensure you are working inside the correct project via the following `oc` command:\n\n  ```shell\n  oc project ${PROJECT_NAME}\n  ```\n\n1. Export the value of your TLS-based KafkaUser name and a unique identifier for the reources to be created into your OpenShift cluster as environment variables so that the following steps in this section can make use of these.\n\n  ```shell\n  export TLS_USER=<YOUR_TLS_USER>\n  # we use tls-user\n  export YOUR_SUFFIX=<UNIQUE_IDENTIFIER>\n  ```\n\n  where\n\n   - `<YOUR_TLS_USER>` is the name you gave when creating the tls credentials in the [pre-requisites](#pre-requisites) section. If you don't remember the tls KafkaUser you created, you can check it out with the following `oc` command:\n    ```shell\n    $ oc get kafkausers -n ${EVENTSTREAMS_NS}\n    NAME                  CLUSTER         AUTHENTICATION   AUTHORIZATION\n    tls-user             eda-dev     tls              simple\n    ```\n    _\\*NOTE: We are copying and renaming the credentials in a single command to minimize the need for editing deployment documents._\n   - `<UNIQUE_IDENTIFIER>` is a unique identifier of your choice to be used as the suffix for any resource created in OpenShift and IBM Event Streams so that it does not collide with anyone else also completing this tutorial.\n\n1. If not done so already in the previous section where we deployed the Vaccine Reefer Simulator microservice, copy the server-side public certificate of the Event Streams instance to your local project:\n\n  ```shell\n  oc get secret ${CLUSTER_NAME}-cluster-ca-cert -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"kafka-cluster-ca-cert\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n  _\\*NOTE: We are copying and renaming the certificate in a single command to minimize the need for editing deployment documents. That is, we are providing the server-side TLS certificate in the secret the Vaccine Reefer Simulator and the Vaccine Monitoring Agent microservices are expecting to find it._\n\n1. Copy your TLS-based KafkaUser's credentials you created in the [pre-requisites](#pre-requisites) section to the local namespace with the following `oc` command:\n\n  ```shell\n  oc get secret ${TLS_USER} -n ${EVENTSTREAMS_NS} -o json | jq -r '.metadata.name=\"tls\"' | jq --arg project_name \"${PROJECT_NAME}\" -r '.metadata.namespace=$project_name' | oc apply -f -\n  ```\n\n1. Create a ConfigMap named `agent-cm` to hold the configuration for the Vaccine Monitoring Agent microservice with the following `oc` command:\n\n  ```shell\n  oc create configmap agent-cm \\\n  --from-literal=REEFER_TOPIC=<YOUR_REEFER_TOPIC> \\\n  --from-literal=TELEMETRY_TOPIC=<YOUR_TELEMETRY_TOPIC> \\\n  --from-literal=KAFKA_BOOTSTRAP_SERVERS=${CLUSTER_NAME}-kafka-bootstrap.${EVENTSTREAMS_NS}.svc:9093 \\\n  --from-literal=QUARKUS_KAFKA_STREAMS_APPLICATION_ID=cold-chain-agent-${YOUR_SUFFIX} \\\n  --from-literal=KAFKA_SECURITY_PROTOCOL=SSL \\\n  --from-literal=TEMPERATURE_THRESHOLD=-30.0 \\\n  --from-literal=PREDICTION_ENABLED=false\n  ```\n\n  where\n\n   - `<YOUR_REEFER_TOPIC>` is the name of the topic that will get the vaccine cold chain temperature violation alert events that you created in the [pre-requisites](#pre-requisites) section.\n   - `<YOUR_TELEMETRY_TOPIC>` is the name of the topic that will get the container telemetries events that you created in the [pre-requisites](#pre-requisites) section.\n   - `<ARE_PREDICTIONS_ENABLED>` will be **true** or **false** depending on whether you completed the [Developing the Anomaly Detection Model with Watson Studio](/analyze/ws-ml-dev/) section or not. If you are not sure, set it to **false**.\n\n1. Deploy Vaccine Monitoring Agent microservice by executing the following `oc` command:\n\n  ```shell\n  oc apply -f https://raw.githubusercontent.com/ibm-cloud-architecture/vaccine-monitoring-agent/master/src/main/kubernetes/deployment.yml\n  ```\n\n  You should see the following output:\n\n  ```shell\n  serviceaccount/reefer-monitoring-agent created\n  service/reefer-monitoring-agent created\n  rolebinding.rbac.authorization.k8s.io/reefer-monitoring-agent-view created\n  imagestream.image.openshift.io/openjdk-11 created\n  deploymentconfig.apps.openshift.io/reefer-monitoring-agent created\n  route.route.openshift.io/reefer-monitoring-agent created\n  ```\n\n## Scenario script\n\nOnce the solution is up and running, execute the following steps to present an end-to-end demonstration:\n\n### Generate vaccine container telemetry events\n\n1. Obtain the Vaccine Reefer Simulator's  UI via the following `oc` command:\n\n  ```shell\n  oc get route vaccine-reefer-simulator -o jsonpath=\"https://{.status.ingress[0].host}\" && echo \n  ```\n\n1. Open the above url in your web browser to access the user interface \n\n\n  ![flasgger1](./images/simulator.png)\n\n1. In the **Edit Value** text box, update the values of the records accordingly:\n\n   ```shell\n   {\n      \"containerID\": \"C21\",\n      \"nb_of_records\": 300,\n      \"product_id\": \"covid-19\",\n      \"simulation\": \"tempgrowth\"\n    }\n   ```\n\nAfter sometime the temperature grows up to the ambiant temperature and an Alerts should come in the table.\n\n### Analyze simulated reefer telemetry data\n\n1. Obtain your IBM Event Streams Console UI's url via the following `oc` command:\n\n  ```shell\n  oc get route -n ${EVENTSTREAMS_NS} ${CLUSTER_NAME}-ibm-es-ui -o jsonpath=\"https://{.status.ingress[0].host}\"\n  ```\n\n1. Open your IBM Event Streams Console UI by pointing your browser to the above url.\n\n1. Click on **Topics** from the left navigation menu and select your `YOUR_TELEMETRY_TOPIC` you created in the [pre-requisites](#pre-requisites) section from the topic list.\n\n1. Explore the messages tab and the individual telemetry records emitted by the Vaccine Reefer Simulator component.\n\n  ![messages](./images/messages.png)\n\n### Analyze generated cold-chain violations\n\n1. Open your IBM Event Streams Console UI by pointing your browser to the above url.\n\n1. Click on **Topics** from the left navigation menu and select your `YOUR_ALERT_TOPIC`.\n\n1. Explore the messages tab and the observed vaccine cold-chain violation alert events.\n\n  ![messages2](./images/messages2.png)\n\n1. The reefer container information contained in this topic have been identified as having observed temperatures outside the allowable range more than the allowable number of times, as determined to preserve the state of the vaccine doses contained.\n\n1. Get the route to the Vaccine Monitoring Agent microservice with the following `oc` command:\n\n  ```shell\n  oc get route reefer-monitoring-agent -o jsonpath=\"https://{.status.ingress[0].host}\"\n  ```\n\n1. Point your browser to the `/swagger-ui` Swagger API endpoint that the Vaccine Monitoring Agent microservice exposes by using the above url. That is, point your browser to `<URL>/swagger-ui/`\n\n  ![messages3](./images/messages3.png)\n\n1. Click on the first API endpoint definition the Swagger UI lists (`/reefer-tracker/data/{reeferID}`) that would allow us to query the Vaccine Monitoring Agent microservice to retrieve the monitoring data for a specific reefer container ID.\n\n1. Once this API endpoint definition gets expanded, click on the **Try it out** button on the top right corner. That will make the `reeferID` text input box active. Insert the reefer ID you used in the previous [Generate vaccine container telemetry events](#generate-vaccine-container-telemetry-events) section to simulate telemetries for and click on **Execute**. You should see the monitoring data for that reefer container similar to the following picture:\n\n  ![messages4](./images/messages4.png)\n\n  where you will see in the reponse body a json object representing the monitoring data for the reefer container you requested it for. You will be able to see if there has been any cold chain temperature violations, how many, the last temperatures, etc...\n\n\n### Clearing the project\n\nTo delete the different resources we have created on your OpenShift cluster throughout this tutorial do the following:\n\n```shell\noc delete -k apps/cold-chain-use-case/\noc delete project ${PROJECT_NAME}\n```\n\nFinally, delete all the topics created in your IBM Event Streams instance. These are your `YOUR_TELEMETRY_TOPIC` and `YOUR_REEFER_TOPIC` you created in the [pre-requisites](#pre-requisites) section. The other two are internal topics created as a result of the Kafka Streams stateful operations being done in the Vaccine Monitoring Agent microservice code (see [here](https://github.com/ibm-cloud-architecture/vaccine-monitoring-agent/blob/master/src/main/java/ibm/gse/eda/vaccine/coldchainagent/domain/TelemetryAssessor.java#L86-L133) for more detail on those). These two internal topics should have the following names:\n\n```shell\ncold-chain-agent-<YOUR_SUFFIX>-reeferAggregateTable-changelog\ncold-chain-agent-<YOUR_SUFFIX>-reeferAggregateTable-repartition\n```\n\nTo delete these topics, you simply need to go to your IBM Event Streams instance UI dashboard, click on topics on the left hand side navigation menu, click on the three-dots options button that appears on the right hand side of each of the topics in the topics list and select delete.\n","fileAbsolutePath":"/home/runner/work/vaccine-solution-main/vaccine-solution-main/docs/src/pages/use-cases/cold-chain/index.mdx"}}}}